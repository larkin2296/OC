<?php

namespace App\Repositories\Models;

use App\Traits\ModelTrait;
use Illuminate\Database\Eloquent\Model;
use Prettus\Repository\Contracts\Transformable;
use Prettus\Repository\Traits\TransformableTrait;
use Illuminate\Database\Eloquent\Builder;
/**
 * Class Source.
 *
 * @package namespace App\Repositories\Models;
 */
class Source extends Model implements Transformable
{
    use TransformableTrait,ModelTrait;

    protected $dates = [
        'accept_report_date'
    ];
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'accept_report_date',
        'solution_number',
        'file_class',
        'file_source',
        'remark',
        'issue',
        'status',
        'creator_uuid',
        'creator_name',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::creating(function(Source $source){
            $source->creator_uuid = auth()->id();
            $source->creator_name = auth()->user()->name;
        });
    }

    protected $table = 'source';

    protected $appends = [
        'id_hash'
    ];

    public function getIdHashAttribute()
    {
        return $this->encodeId('source', $this->id);
    }

    /**
     * 获取附件
     * @return [type] [description]
     */
    public function attachments()
    {
        return $this->morphToMany(Attachment::class, 'attachment_model');
    }

    public function ScopeStatus(Builder $builder, $status, $not_in = false)
    {
        if (is_array($status)) {
            if ($not_in) {
                return $builder->whereNotIn('status', $status);
            }

            return $builder->whereIn('status', $status);
        } else {
            if ($not_in) {
                return $builder->where('status', '<>', $status);
            }

            return $builder->where('status', $status);
        }

    }

    public function ScopeIssue(Builder $builder,$issue,$not_in = false)
    {
        if (is_array($issue)) {
            if ($not_in) {
                return $builder->whereNotIn('issue', $issue);
            }

            return $builder->whereIn('issue', $issue);
        } else {
            if ($not_in) {
                return $builder->where('issue', '<>', $issue);
            }

            return $builder->where('issue', $issue);
        }
    }

}
